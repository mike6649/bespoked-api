# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Product(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, manufacturer: str=None, style: str=None, purchase_price: str=None, sale_price: str=None, quantity: int=None, commission_pct: str=None):  # noqa: E501
        """Product - a model defined in Swagger

        :param id: The id of this Product.  # noqa: E501
        :type id: int
        :param manufacturer: The manufacturer of this Product.  # noqa: E501
        :type manufacturer: str
        :param style: The style of this Product.  # noqa: E501
        :type style: str
        :param purchase_price: The purchase_price of this Product.  # noqa: E501
        :type purchase_price: str
        :param sale_price: The sale_price of this Product.  # noqa: E501
        :type sale_price: str
        :param quantity: The quantity of this Product.  # noqa: E501
        :type quantity: int
        :param commission_pct: The commission_pct of this Product.  # noqa: E501
        :type commission_pct: str
        """
        self.swagger_types = {
            'id': int,
            'manufacturer': str,
            'style': str,
            'purchase_price': str,
            'sale_price': str,
            'quantity': int,
            'commission_pct': str
        }

        self.attribute_map = {
            'id': 'id',
            'manufacturer': 'manufacturer',
            'style': 'style',
            'purchase_price': 'purchase_price',
            'sale_price': 'sale_price',
            'quantity': 'quantity',
            'commission_pct': 'commission_pct'
        }
        self._id = id
        self._manufacturer = manufacturer
        self._style = style
        self._purchase_price = purchase_price
        self._sale_price = sale_price
        self._quantity = quantity
        self._commission_pct = commission_pct

    @classmethod
    def from_dict(cls, dikt) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Product of this Product.  # noqa: E501
        :rtype: Product
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Product.


        :return: The id of this Product.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Product.


        :param id: The id of this Product.
        :type id: int
        """

        self._id = id

    @property
    def manufacturer(self) -> str:
        """Gets the manufacturer of this Product.


        :return: The manufacturer of this Product.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer: str):
        """Sets the manufacturer of this Product.


        :param manufacturer: The manufacturer of this Product.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def style(self) -> str:
        """Gets the style of this Product.


        :return: The style of this Product.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style: str):
        """Sets the style of this Product.


        :param style: The style of this Product.
        :type style: str
        """

        self._style = style

    @property
    def purchase_price(self) -> str:
        """Gets the purchase_price of this Product.


        :return: The purchase_price of this Product.
        :rtype: str
        """
        return self._purchase_price

    @purchase_price.setter
    def purchase_price(self, purchase_price: str):
        """Sets the purchase_price of this Product.


        :param purchase_price: The purchase_price of this Product.
        :type purchase_price: str
        """

        self._purchase_price = purchase_price

    @property
    def sale_price(self) -> str:
        """Gets the sale_price of this Product.


        :return: The sale_price of this Product.
        :rtype: str
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price: str):
        """Sets the sale_price of this Product.


        :param sale_price: The sale_price of this Product.
        :type sale_price: str
        """

        self._sale_price = sale_price

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Product.


        :return: The quantity of this Product.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Product.


        :param quantity: The quantity of this Product.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def commission_pct(self) -> str:
        """Gets the commission_pct of this Product.


        :return: The commission_pct of this Product.
        :rtype: str
        """
        return self._commission_pct

    @commission_pct.setter
    def commission_pct(self, commission_pct: str):
        """Sets the commission_pct of this Product.


        :param commission_pct: The commission_pct of this Product.
        :type commission_pct: str
        """

        self._commission_pct = commission_pct
